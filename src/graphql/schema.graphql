# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type ActivityMetric {
    "number of active C1 issue comments contributors in the past 90 days"
    activeC1IssueCommentsContributorCount: Float
    "number of active C1 issue create contributors in the past 90 days"
    activeC1IssueCreateContributorCount: Float
    "number of active C1 pr comments contributors in the past 90 days"
    activeC1PrCommentsContributorCount: Float
    "number of active C1 pr create contributors in the past 90 days"
    activeC1PrCreateContributorCount: Float
    "number of active C2 developers in the past 90 days"
    activeC2ContributorCount: Float
    "score of activity metric model"
    activityScore: Float
    "number of issues closed in the past 90 days"
    closedIssuesCount: Float
    "mean of comments per PR over the past 90 days"
    codeReviewCount: Float
    "mean of comments per issue over the past 90 days"
    commentFrequency: Float
    "mean of submissions per week over the past 90 days"
    commitFrequency: Float
    "number of active D1 developers in the past 90 days"
    contributorCount: Float
    "number of months since the project was created"
    createdSince: Float
    "metric model creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "organization count"
    orgCount: Float
    "number of releases in the last 90 days"
    recentReleasesCount: Float
    "number of issue updates in the past 90 days"
    updatedIssuesCount: Float
    "(average of months from the last code commit to the time of statistics"
    updatedSince: Float
}

type ActivitySummary {
    "number of active C1 issue comments contributors in the past 90 days"
    activeC1IssueCommentsContributorCount: MetricStat
    "number of active C1 issue create contributors in the past 90 days"
    activeC1IssueCreateContributorCount: MetricStat
    "number of active C1 pr comments contributors in the past 90 days"
    activeC1PrCommentsContributorCount: MetricStat
    "number of active C1 pr create contributors in the past 90 days"
    activeC1PrCreateContributorCount: MetricStat
    "number of active C2 developers in the past 90 days"
    activeC2ContributorCount: MetricStat
    "score of activity metric model"
    activityScore: MetricStat
    "number of issues closed in the past 90 days"
    closedIssuesCount: MetricStat
    "mean of comments per PR over the past 90 days"
    codeReviewCount: MetricStat
    "mean of comments per issue over the past 90 days"
    commentFrequency: MetricStat
    "mean of submissions per week over the past 90 days"
    commitFrequency: MetricStat
    "number of active D1 developers in the past 90 days"
    contributorCount: MetricStat
    "number of months since the project was created"
    createdSince: MetricStat
    "metric summary creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "organization count"
    orgCount: MetricStat
    "number of releases in the last 90 days"
    recentReleasesCount: MetricStat
    "number of issue updates in the past 90 days"
    updatedIssuesCount: MetricStat
    "(average of months from the last code commit to the time of statistics"
    updatedSince: MetricStat
}

"Autogenerated return type of AppendKeywordToCollection"
type AppendKeywordToCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: CollectionDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of AppendKeywordToProject"
type AppendKeywordToProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: ProjectDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of AppendProjectToCollection"
type AppendProjectToCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: CollectionDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

type BetaMetric {
    createdAt: ISO8601DateTime!
    desc: String
    dimensionality: String
    extra: String
    id: Int
    metric: String
    status: String
    updatedAt: ISO8601DateTime!
}

type BetaMetricOverview {
    projectsCount: Int
    trends: [BetaRepo!]
}

type BetaMetricScore {
    "metric model creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "name of this beta metric"
    name: String
    "score of this beta metric"
    score: Float
}

type BetaRepo {
    backend: String
    betaMetricScores: [BetaMetricScore!]!
    createdAt: ISO8601DateTime!
    language: String
    name: String
    origin: String!
    path: String
    updatedAt: ISO8601DateTime!
}

type CodequalityMetric {
    "number of active C1 pr comments contributors in the past 90 days"
    activeC1PrCommentsContributorCount: Float
    "number of active C1 pr create contributors in the past 90 days"
    activeC1PrCreateContributorCount: Float
    "number of active C2 developers in the past 90 days"
    activeC2ContributorCount: Float
    "ratio of merge pulls and all pulls"
    codeMergeRatio: Float
    "merged pr count past 90 days"
    codeMergedCount: Float
    "score of code quality metric model"
    codeQualityGuarantee: Float
    "ratio of pulls with one more reviewers and all pulls"
    codeReviewRatio: Float
    "count of pulls with one more reviewers"
    codeReviewedCount: Float
    "mean of submissions per week over the past 90 days"
    commitFrequency: Float
    "mean of inside submissions per week over the past 90 days"
    commitFrequencyInside: Float
    "number of active D1 developers in the past 90 days"
    contributorCount: Float
    "ratio of pr_commit_linked_count and pr_commit_count"
    gitPrLinkedRatio: Float
    "metric model creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "maintenance status"
    isMaintained: Float
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "average of added lines code each commit"
    linesAddedFrequency: Float
    "average of removed lines code each commit"
    linesRemovedFrequency: Float
    "average of lines code each commit"
    locFrequency: Float
    "pr count base for pr_commit_linked_count past 90 days"
    prCommitCount: Float
    "pr with commits linked count past 90 days"
    prCommitLinkedCount: Float
    "all pr count past 90 days"
    prCount: Float
    "count of pulls which are linked issues"
    prIssueLinkedCount: Float
    "ratio of pulls which are linked issues and all pulls"
    prIssueLinkedRatio: Float
}

type CodequalitySummary {
    "number of active C1 pr comments contributors in the past 90 days"
    activeC1PrCommentsContributorCount: MetricStat
    "number of active C1 pr create contributors in the past 90 days"
    activeC1PrCreateContributorCount: MetricStat
    "number of active C2 developers in the past 90 days"
    activeC2ContributorCount: MetricStat
    "ratio of merge pulls and all pulls"
    codeMergeRatio: MetricStat
    "merged pr count past 90 days"
    codeMergedCount: MetricStat
    "score of code quality metric model"
    codeQualityGuarantee: MetricStat
    "ratio of pulls with one more reviewers and all pulls"
    codeReviewRatio: MetricStat
    "count of pulls with one more reviewers"
    codeReviewedCount: MetricStat
    "mean of submissions per week over the past 90 days"
    commitFrequency: MetricStat
    "mean of inside submissions per week over the past 90 days"
    commitFrequencyInside: MetricStat
    "number of active D1 developers in the past 90 days"
    contributorCount: MetricStat
    "ratio of pr_commit_linked_count and pr_commit_count"
    gitPrLinkedRatio: MetricStat
    "metric summary creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "maintenance status"
    isMaintained: MetricStat
    "average of added lines code each commit"
    linesAddedFrequency: MetricStat
    "average of removed lines code each commit"
    linesRemovedFrequency: MetricStat
    "average of lines code each commit"
    locFrequency: MetricStat
    "pr count base for pr_commit_linked_count past 90 days"
    prCommitCount: MetricStat
    "pr with commits linked count past 90 days"
    prCommitLinkedCount: MetricStat
    "all pr count past 90 days"
    prCount: MetricStat
    "count of pulls which are linked issues"
    prIssueLinkedCount: MetricStat
    "ratio of pulls which are linked issues and all pulls"
    prIssueLinkedRatio: MetricStat
}

type Collection {
    desc: String
    id: Int
    title: String
}

type CollectionDetail {
    createdAt: ISO8601DateTime
    desc: String
    id: Int
    keywords: [Keyword!]
    projects: [String!]
    title: String
    updatedAt: ISO8601DateTime
}

type CollectionOverview {
    count: Int
    items: [Collection!]
    page: Int
    totalPage: Int
}

type CommunityMetric {
    "mean of bug issues open time (days)"
    bugIssueOpenTimeAvg: Float
    "middle of bug issues open time (days)"
    bugIssueOpenTimeMid: Float
    "number of pulls closed in the past 90 days"
    closedPrsCount: Float
    "mean of comments per PR over the past 90 days"
    codeReviewCount: Float
    "mean of comments per issue over the past 90 days"
    commentFrequency: Float
    "score of community support metric model"
    communitySupportScore: Float
    "metric model creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "mean of issues first response time (days)"
    issueFirstReponseAvg: Float
    "middle of issues first response time (days)"
    issueFirstReponseMid: Float
    "mean of issues open time (days)"
    issueOpenTimeAvg: Float
    "middle of issues open time (days)"
    issueOpenTimeMid: Float
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "mean of pulls open time (days)"
    prOpenTimeAvg: Float
    "middle of pulls open time (days)"
    prOpenTimeMid: Float
    "number of issue updates in the past 90 days"
    updatedIssuesCount: Float
}

type CommunityOverview {
    projectsCount: Int
    trends: [Repo!]
}

type CommunitySummary {
    "mean of bug issues open time (days)"
    bugIssueOpenTimeAvg: MetricStat
    "middle of bug issues open time (days)"
    bugIssueOpenTimeMid: MetricStat
    "number of pulls closed in the past 90 days"
    closedPrsCount: MetricStat
    "mean of comments per PR over the past 90 days"
    codeReviewCount: MetricStat
    "mean of comments per issue over the past 90 days"
    commentFrequency: MetricStat
    "score of community support metric model"
    communitySupportScore: MetricStat
    "metric summary creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "mean of issues first response time (days)"
    issueFirstReponseAvg: MetricStat
    "middle of issues first response time (days)"
    issueFirstReponseMid: MetricStat
    "mean of issues open time (days)"
    issueOpenTimeAvg: MetricStat
    "middle of issues open time (days)"
    issueOpenTimeMid: MetricStat
    "mean of pulls open time (days)"
    prOpenTimeAvg: MetricStat
    "middle of pulls open time (days)"
    prOpenTimeMid: MetricStat
    "number of issue updates in the past 90 days"
    updatedIssuesCount: MetricStat
}

"Autogenerated return type of CreateCollection"
type CreateCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    desc: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    id: Int
    message: String
    status: String!
    title: String
}

"Autogenerated return type of CreateKeyword"
type CreateKeywordPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    desc: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    id: Int
    message: String
    status: String!
    title: String
}

"Autogenerated return type of CreateProjectTask"
type CreateProjectTaskPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    prUrl: String
    status: String!
}

"Autogenerated return type of CreateRepoTask"
type CreateRepoTaskPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    prUrl: String
    status: String!
}

"Autogenerated return type of DeleteCollection"
type DeleteCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of DeleteKeyword"
type DeleteKeywordPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of DetachKeywordFromCollection"
type DetachKeywordFromCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: CollectionDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of DetachKeywordFromProject"
type DetachKeywordFromProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: ProjectDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

"Autogenerated return type of DetachProjectFromCollection"
type DetachProjectFromCollectionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    data: CollectionDetail
    "Errors encountered during execution of the mutation."
    errors: [Error!]
    message: String
    status: String!
}

type Error {
    "错误信息"
    message: String
    "错误路径"
    path: [String!]
}

type GroupActivityMetric {
    "mean of submissions per week over the past 90 days"
    commitFrequency: Float
    "(average of months from the last org code commit to the time of statistics"
    contributionLast: Float
    "number of active D1 developers in the past 90 days"
    contributorCount: Float
    "metric model creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "organization count"
    orgCount: Float
    "score of organization activity metric model"
    organizationsActivity: Float
}

type GroupActivitySummary {
    "mean of submissions per week over the past 90 days"
    commitFrequency: MetricStat
    "(average of months from the last org code commit to the time of statistics"
    contributionLast: MetricStat
    "number of active D1 developers in the past 90 days"
    contributorCount: MetricStat
    "metric summary creatiton time"
    grimoireCreationDate: ISO8601DateTime
    "organization count"
    orgCount: MetricStat
    "score of organization activity metric model"
    organizationsActivity: MetricStat
}

type Keyword {
    desc: String
    id: Int
    title: String
}

type KeywordOverview {
    count: Int
    items: [Keyword!]
    page: Int
    totalPage: Int
}

type LatestMetrics {
    "latest score of activity metric model"
    activityScore: Float
    "latest score of activity metric model updated_at"
    activityScoreUpdatedAt: ISO8601DateTime
    "latest score of code quality metric model"
    codeQualityGuarantee: Float
    "latest score of code quality metric model updated_at"
    codeQualityGuaranteeUpdatedAt: ISO8601DateTime
    "latest score of community support metric model"
    communitySupportScore: Float
    "latest score of community support metric model up"
    communitySupportScoreUpdatedAt: ISO8601DateTime
    "metric model object identification"
    label: String
    "metric model object level"
    level: String
    "latest score of organizations activity metric model"
    organizationsActivity: Float
    "latest score of organizations activity metric model updated_at"
    organizationsActivityUpdatedAt: ISO8601DateTime
}

type MetricStat {
    "arithmetic mean"
    mean: Float
    "50 percentile"
    median: Float
}

type Mutation {
    "Append a keyword to a collection"
    appendKeywordToCollection(
        "Parameters for AppendKeywordToCollection"
        input: AppendKeywordToCollectionInput!
    ): AppendKeywordToCollectionPayload
    "Append a keyword to a repo or community"
    appendKeywordToProject(
        "Parameters for AppendKeywordToProject"
        input: AppendKeywordToProjectInput!
    ): AppendKeywordToProjectPayload
    "Append a repo or community to a collection"
    appendProjectToCollection(
        "Parameters for AppendProjectToCollection"
        input: AppendProjectToCollectionInput!
    ): AppendProjectToCollectionPayload
    "Create a compass collection"
    createCollection(
        "Parameters for CreateCollection"
        input: CreateCollectionInput!
    ): CreateCollectionPayload
    "Create a compass keyword"
    createKeyword(
        "Parameters for CreateKeyword"
        input: CreateKeywordInput!
    ): CreateKeywordPayload
    "Submit a community analysis task"
    createProjectTask(
        "Parameters for CreateProjectTask"
        input: CreateProjectTaskInput!
    ): CreateProjectTaskPayload
    "Submit a repository analysis task"
    createRepoTask(
        "Parameters for CreateRepoTask"
        input: CreateRepoTaskInput!
    ): CreateRepoTaskPayload
    "Delete a compass collection"
    deleteCollection(
        "Parameters for DeleteCollection"
        input: DeleteCollectionInput!
    ): DeleteCollectionPayload
    "Delete a compass keyword"
    deleteKeyword(
        "Parameters for DeleteKeyword"
        input: DeleteKeywordInput!
    ): DeleteKeywordPayload
    "Detach a keyword from a collection"
    detachKeywordFromCollection(
        "Parameters for DetachKeywordFromCollection"
        input: DetachKeywordFromCollectionInput!
    ): DetachKeywordFromCollectionPayload
    "Detach a keyword from a repo or community"
    detachKeywordFromProject(
        "Parameters for DetachKeywordFromProject"
        input: DetachKeywordFromProjectInput!
    ): DetachKeywordFromProjectPayload
    "Detach a repo or community from a collection"
    detachProjectFromCollection(
        "Parameters for DetachProjectFromCollection"
        input: DetachProjectFromCollectionInput!
    ): DetachProjectFromCollectionPayload
}

type Overview {
    dimensionsCount: Int
    metricsCount: Int
    modelsCount: Int
    projectsCount: Int
    trends: [Repo!]
}

type ProjectCompletionRow {
    "metric model object identification"
    label: String
    "metric model object level (project or repo)"
    level: String
    "metric task status (pending/progress/success/error/canceled/unsumbit)"
    status: String
}

type ProjectDetail {
    keywords: [Keyword!]
    label: String
}

type Query {
    "repo or project analysis status (pending/progress/success/error/canceled/unsumbit)"
    analysisStatus(
        "repo or project label"
        label: String!
    ): String!
    "return beta metric overview"
    betaMetricOverview(
        "beta metric id"
        id: Int!,
        "bete metric repository number"
        limit: Int
    ): BetaMetricOverview!
    "return beta metrics list"
    betaMetricsIndex(
        "filter by dimensionality"
        dimensionality: String,
        "filter by metric"
        metric: String,
        "page number"
        page: Int,
        "per number"
        per: Int,
        "filter by status"
        status: String
    ): [BetaMetric!]!
    "Get detail data of a collection"
    collectionDetail(
        "collection id"
        id: Int!
    ): CollectionDetail!
    "Get overview data of all collections"
    collectionOverview(
        "page number"
        page: Int,
        "per page number"
        per: Int
    ): CollectionOverview!
    "Get overview data of a community"
    communityOverview(
        "community label"
        label: String!,
        "page number"
        page: Int,
        "per page number"
        per: Int
    ): CommunityOverview!
    "Fuzzy search project by keyword"
    fuzzySearch(
        "repo or project keyword"
        keyword: String!,
        "filter by level (repo/project)"
        level: String
    ): [ProjectCompletionRow!]!
    "Get overview data of all keywords"
    keywordOverview(
        "page number"
        page: Int,
        "per page number"
        per: Int
    ): KeywordOverview!
    "Get latest metrics data of the specified label"
    latestMetrics(
        "repo or project label"
        label: String!,
        "repo or project"
        level: String = "repo"
    ): LatestMetrics!
    "Get activity metrics data of compass"
    metricActivity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime,
        "repo or project label"
        label: String!,
        "repo or project"
        level: String = "repo"
    ): [ActivityMetric!]!
    "Get code quality metrics data of compass"
    metricCodequality(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime,
        "repo or project label"
        label: String!,
        "repo or project"
        level: String = "repo"
    ): [CodequalityMetric!]!
    "Get community metrics data of compass"
    metricCommunity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime,
        "repo or project label"
        label: String!,
        "repo or project"
        level: String = "repo"
    ): [CommunityMetric!]!
    "Get group activity metrics data of compass"
    metricGroupActivity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime,
        "repo or project label"
        label: String!,
        "repo or project"
        level: String = "repo"
    ): [GroupActivityMetric!]!
    "Get overview data of compass"
    overview: Overview!
    "Get activity summary data of compass"
    summaryActivity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime
    ): [ActivitySummary!]!
    "Get codequality summary data of compass"
    summaryCodequality(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime
    ): [CodequalitySummary!]!
    "Get community summary data of compass"
    summaryCommunity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime
    ): [CommunitySummary!]!
    "Get group activity summary data of compass"
    summaryGroupActivity(
        "begin date"
        beginDate: ISO8601DateTime,
        "end date"
        endDate: ISO8601DateTime
    ): [GroupActivitySummary!]!
}

type Repo {
    backend: String
    createdAt: ISO8601DateTime!
    forksCount: Int
    language: String
    metricActivity: [ActivityMetric!]!
    name: String
    openIssuesCount: Int
    origin: String!
    path: String
    stargazersCount: Int
    updatedAt: ISO8601DateTime!
    watchersCount: Int
}

"An ISO 8601-encoded datetime"
scalar ISO8601DateTime

"Autogenerated input type of AppendKeywordToCollection"
input AppendKeywordToCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection id"
    collectionId: Int!
    "keyword id"
    keywordId: Int!
    "admin token"
    token: String!
}

"Autogenerated input type of AppendKeywordToProject"
input AppendKeywordToProjectInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "keyword id"
    keywordId: Int!
    "repo or community label"
    label: String!
    "admin token"
    token: String!
}

"Autogenerated input type of AppendProjectToCollection"
input AppendProjectToCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection id"
    collectionId: Int!
    "repo or community label"
    label: String!
    "admin token"
    token: String!
}

"Autogenerated input type of CreateCollection"
input CreateCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection description"
    desc: String
    "collection title"
    title: String!
    "admin token"
    token: String!
}

"Autogenerated input type of CreateKeyword"
input CreateKeywordInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "keyword description"
    desc: String
    "keyword title"
    title: String!
    "admin token"
    token: String!
}

"Autogenerated input type of CreateProjectTask"
input CreateProjectTaskInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "user's origin (gitee/github)"
    origin: String!
    "project label for following repositories"
    projectName: String!
    "project detail information"
    projectTypes: [ProjectTypeInput!]!
    "user's oauth token only for username verification"
    token: String!
    "gitee or github login/username"
    username: String!
}

"Autogenerated input type of CreateRepoTask"
input CreateRepoTaskInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "user's origin (gitee/github)"
    origin: String!
    "repository urls"
    repoUrls: [String!]!
    "user's oauth token only for username verification"
    token: String!
    "gitee or github login/username"
    username: String!
}

"Autogenerated input type of DeleteCollection"
input DeleteCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection id"
    id: Int!
    "admin token"
    token: String!
}

"Autogenerated input type of DeleteKeyword"
input DeleteKeywordInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "keyword id"
    id: Int!
    "admin token"
    token: String!
}

"Autogenerated input type of DetachKeywordFromCollection"
input DetachKeywordFromCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection id"
    collectionId: Int!
    "keyword id"
    keywordId: Int!
    "admin token"
    token: String!
}

"Autogenerated input type of DetachKeywordFromProject"
input DetachKeywordFromProjectInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "keyword id"
    keywordId: Int!
    "repo or community label"
    label: String!
    "admin token"
    token: String!
}

"Autogenerated input type of DetachProjectFromCollection"
input DetachProjectFromCollectionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "collection id"
    collectionId: Int!
    "repo or community label"
    label: String!
    "admin token"
    token: String!
}

input ProjectTypeInput {
    "project's repositories list"
    repoList: [String!]!
    "project type label"
    type: String!
}
