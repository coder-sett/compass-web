query userinfo {
  currentUser {
    id
    name
    roleLevel
    email
    language
    emailVerified
    loginBinds {
      account
      avatarUrl
      nickname
      provider
    }
    contributingOrgs {
      firstDate
      lastDate
      orgName
      platformType
    }
  }
}

query subscriptions($page: Int!, $per: Int!) {
  currentUser {
    subscriptions(page: $page, per: $per) {
      count
      page
      totalPage
      items {
        count
        id
        label
        level
        status
        statusUpdatedAt
        collectAt
        completeAt
      }
    }
  }
}

query subscriptionCount($label: String!, $level: String!) {
  subjectSubscriptionCount(label: $label, level: $level) {
    count
    subscribed
  }
}

query status($label: String!) {
  analysisStatus(label: $label)
}

query statusVerify($label: String, $shortCode: String) {
  analysisStatusVerify(label: $label, shortCode: $shortCode) {
    label
    level
    shortCode
    status
    collections
  }
}

query search($keyword: String!, $level: String) {
  fuzzySearch(keyword: $keyword, level: $level) {
    level
    label
    status
    shortCode
    collections
  }
}

query latestMetrics($label: String!, $level: String) {
  latestMetrics(level: $level, label: $label) {
    activityScore
    activityScoreUpdatedAt
    codeQualityGuarantee
    codeQualityGuaranteeUpdatedAt
    communitySupportScore
    communitySupportScoreUpdatedAt
    label
    level
    shortCode
    organizationsActivity
    organizationsActivityUpdatedAt
    reposCount
  }
}

query communityRepos($label: String!, $page: Int, $per: Int, $type: String) {
  communityOverview(label: $label, page: $page, per: $per, type: $type) {
    projectsCount
    communityOrgUrl
    trends {
      backend
      name
      path
      type
      shortCode
      metricActivity {
        activityScore
        grimoireCreationDate
      }
    }
  }
}
query communityReposSearch(
  $label: String!
  $page: Int
  $per: Int
  $type: String
) {
  communityRepos(label: $label, page: $page, per: $per, type: $type) {
    count
    items {
      label
    }
    page
    totalPage
  }
}
query metric(
  $label: String!
  $level: String = "repo"
  $start: ISO8601DateTime
  $end: ISO8601DateTime
  $repoType: String
) {
  metricCodequality(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    codeMergeRatio
    codeMergedCount
    codeQualityGuarantee
    codeReviewRatio
    codeReviewedCount
    commitFrequency
    commitFrequencyInside
    contributorCount
    gitPrLinkedRatio
    grimoireCreationDate
    isMaintained
    label
    level
    shortCode
    type
    linesAddedFrequency
    linesRemovedFrequency
    locFrequency
    prCommitCount
    prCommitLinkedCount
    prCount
    prIssueLinkedCount
    prIssueLinkedRatio
  }
  metricCommunity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    bugIssueOpenTimeAvg
    bugIssueOpenTimeMid
    closedPrsCount
    codeReviewCount
    commentFrequency
    communitySupportScore
    grimoireCreationDate
    issueFirstReponseAvg
    issueFirstReponseMid
    issueOpenTimeAvg
    issueOpenTimeMid
    label
    level
    shortCode
    type
    prOpenTimeAvg
    prOpenTimeMid
    updatedIssuesCount
  }
  metricActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activeC1IssueCommentsContributorCount
    activeC1IssueCreateContributorCount
    activeC1PrCommentsContributorCount
    activeC1PrCreateContributorCount
    activeC2ContributorCount
    activityScore
    orgCount
    closedIssuesCount
    codeReviewCount
    commentFrequency
    commitFrequency
    contributorCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    recentReleasesCount
    updatedIssuesCount
    updatedSince
  }
  metricGroupActivity(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    commitFrequency
    # commitFrequencyOrg
    # commitFrequencyOrgPercentage
    # commitFrequencyPercentage
    contributionLast
    contributorCount
    # contributorOrgCount
    grimoireCreationDate
    label
    level
    shortCode
    type
    orgCount
    organizationsActivity
  }
}

query summary($start: ISO8601DateTime, $end: ISO8601DateTime) {
  summaryActivity(beginDate: $start, endDate: $end) {
    activeC1IssueCommentsContributorCount {
      ...metricStat
    }
    activeC1IssueCreateContributorCount {
      ...metricStat
    }
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    activityScore {
      ...metricStat
    }
    closedIssuesCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    recentReleasesCount {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
    updatedSince {
      ...metricStat
    }
  }
  summaryCodequality(beginDate: $start, endDate: $end) {
    activeC1PrCommentsContributorCount {
      ...metricStat
    }
    activeC1PrCreateContributorCount {
      ...metricStat
    }
    activeC2ContributorCount {
      ...metricStat
    }
    codeMergeRatio {
      ...metricStat
    }
    codeMergedCount {
      ...metricStat
    }
    codeQualityGuarantee {
      ...metricStat
    }
    codeReviewRatio {
      ...metricStat
    }
    codeReviewedCount {
      ...metricStat
    }
    commitFrequency {
      ...metricStat
    }
    commitFrequencyInside {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    gitPrLinkedRatio {
      ...metricStat
    }
    grimoireCreationDate
    isMaintained {
      ...metricStat
    }
    linesAddedFrequency {
      ...metricStat
    }
    linesRemovedFrequency {
      ...metricStat
    }
    locFrequency {
      ...metricStat
    }
    prCommitCount {
      ...metricStat
    }
    prCommitLinkedCount {
      ...metricStat
    }
    prCount {
      ...metricStat
    }
    prIssueLinkedCount {
      ...metricStat
    }
    prIssueLinkedRatio {
      ...metricStat
    }
  }
  summaryCommunity(beginDate: $start, endDate: $end) {
    bugIssueOpenTimeAvg {
      ...metricStat
    }
    bugIssueOpenTimeMid {
      ...metricStat
    }
    closedPrsCount {
      ...metricStat
    }
    codeReviewCount {
      ...metricStat
    }
    commentFrequency {
      ...metricStat
    }
    communitySupportScore {
      ...metricStat
    }
    grimoireCreationDate
    issueFirstReponseAvg {
      ...metricStat
    }
    issueFirstReponseMid {
      ...metricStat
    }
    issueOpenTimeAvg {
      ...metricStat
    }
    issueOpenTimeMid {
      ...metricStat
    }
    prOpenTimeAvg {
      ...metricStat
    }
    prOpenTimeMid {
      ...metricStat
    }
    updatedIssuesCount {
      ...metricStat
    }
  }
  summaryGroupActivity(beginDate: $start, endDate: $end) {
    commitFrequency {
      ...metricStat
    }
    contributionLast {
      ...metricStat
    }
    contributorCount {
      ...metricStat
    }
    grimoireCreationDate
    orgCount {
      ...metricStat
    }
    organizationsActivity {
      ...metricStat
    }
  }
  # summaryStarterProjectHealth(beginDate: $start, endDate: $end) {
  #   busFactor {
  #     ...metricStat
  #   }
  #   changeRequestClosureRatioAllPeriod {
  #     ...metricStat
  #   }
  #   changeRequestClosureRatioSamePeriod {
  #     ...metricStat
  #   }
  #   grimoireCreationDate
  #   prTimeToCloseAvg {
  #     ...metricStat
  #   }
  #   prTimeToCloseMid {
  #     ...metricStat
  #   }
  #   prTimeToFirstResponseMid {
  #     ...metricStat
  #   }
  #   releaseFrequency {
  #     ...metricStat
  #   }
  #   starterProjectHealth {
  #     ...metricStat
  #   }
  # }
}

query orgSearch($keyword: String!) {
  orgFuzzySearch(keyword: $keyword) {
    orgName
  }
}
# query labMetric(
#   $label: String!
#   $level: String = "repo"
#   $start: ISO8601DateTime
#   $end: ISO8601DateTime
# ) {
#   metricStarterProjectHealth(
#     label: $label
#     level: $level
#     beginDate: $start
#     endDate: $end
#   ) {
#     busFactor
#     changeRequestClosedCountAllPeriod
#     changeRequestClosedCountRecently
#     changeRequestClosureRatioAllPeriod
#     changeRequestClosureRatioRecently
#     changeRequestCreatedCountAllPeriod
#     changeRequestCreatedCountRecently
#     grimoireCreationDate
#     label
#     level
#     shortCode
#     prTimeToCloseAvg
#     prTimeToCloseMid
#     prTimeToFirstResponseAvg
#     prTimeToFirstResponseMid
#     releaseFrequency
#     starterProjectHealth
#     type
#   }
# }

fragment metricStat on MetricStat {
  mean
  median
}

query collectionHottest($ident: String!, $limit: Int) {
  collectionHottest(ident: $ident, limit: $limit) {
    label
    level
    shortCode
    status
    updatedAt
  }
}
query collectionList(
  $ident: String!
  $level: String
  $page: Int
  $per: Int
  $keyword: String
  $sortOpts: [SortOptionInput!]
) {
  collectionList(
    ident: $ident
    level: $level
    page: $page
    per: $per
    keyword: $keyword
    sortOpts: $sortOpts
  ) {
    page
    totalPage
    count
    items {
      backend
      language
      name
      openIssuesCount
      origin
      path
      shortCode
      metricActivity {
        activityScore
      }
    }
  }
}

query bulkOverview($labels: [String!]!) {
  bulkOverview(labels: $labels) {
    backend
    forksCount
    language
    name
    openIssuesCount
    path
    shortCode
    stargazersCount
    watchersCount
    metricActivity {
      activityScore
    }
  }
}

query trending($level: String = "repo") {
  trending(level: $level) {
    activityScore
    collections
    fullPath
    label
    level
    logoUrl
    name
    origin
    reposCount
    shortCode
  }
}

query betaMetricOverview($id: Int!, $limit: Int) {
  betaMetricOverview(id: $id, limit: $limit) {
    projectsCount
    trends {
      path
      origin
      name
      backend
      shortCode
      betaMetricScores {
        grimoireCreationDate
        score
      }
    }
  }
}

query betaMetricsIndex($per: Int, $page: Int) {
  betaMetricsIndex(per: $per, page: $page) {
    id
    dimensionality
    desc
    extra
    metric
  }
}

query bulkShortenedLabel($labels: [LabelRowInput!]!) {
  bulkShortenedLabel(labels: $labels) {
    label
    level
    shortCode
  }
}
query metricDashboard(
  $label: String!
  $level: String = "repo"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  contributorsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    contributorAllCount
    highestContributionContributor {
      name
      origin
      type
      value
    }
    highestContributionOrganization {
      name
      origin
      type
      value
    }
    orgAllCount
  }
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentFrequencyMean
    issueCompletionCount
    issueCompletionRatio
    issueCount
    issueUnresponsiveCount
    issueUnresponsiveRatio
  }
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    commitCount
    pullCompletionCount
    pullCompletionRatio
    pullCount
    pullUnresponsiveCount
    pullUnresponsiveRatio
  }
}
query contributorsDetailList(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  contributorsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      contribution
      contributionTypeList {
        contribution
        contributionType
      }
      contributionWithoutObserve
      contributor
      ecologicalType
      isBot
      mileageType
      organization
    }
    origin
    page
    totalPage
  }
}

query ecoContributorsOverview(
  $label: String!
  $level: String = "repo"
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  ecoContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
query orgContributionDistribution(
  $label: String!
  $level: String = "repo"
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributionDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}
query orgContributorsOverview(
  $label: String!
  $level: String = "repo"
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributorsOverview(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query contributorsOverview(
  $label: String!
  $level: String = "repo"
  $filterOpts: [FilterOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  orgContributorsDistribution(
    label: $label
    level: $level
    filterOpts: $filterOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    overviewName
    subTypeName
    subTypePercentage
    topContributorDistribution {
      subCount
      subName
      subRatio
      totalCount
      subBelong
    }
  }
}

query issuesDetailList(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      assigneeLogin
      closedAt
      createdAt
      idInRepo
      labels
      numOfCommentsWithoutBot
      repository
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
query issueCompletion(
  $label: String!
  $level: String = "repo"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query issueComment(
  $label: String!
  $level: String = "repo"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  issuesDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    issueCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query pullsDetailList(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailList(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      closedAt
      createdAt
      idInRepo
      labels
      mergeAuthorLogin
      numReviewComments
      repository
      reviewersLogin
      state
      timeToCloseDays
      timeToFirstAttentionWithoutBot
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
query pullsCompletion(
  $label: String!
  $level: String = "repo"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullStateDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query pullsComment(
  $label: String!
  $level: String = "repo"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  pullsDetailOverview(
    label: $label
    level: $level
    beginDate: $beginDate
    endDate: $endDate
  ) {
    pullCommentDistribution {
      subCount
      subName
      subRatio
      totalCount
    }
  }
}
query verifyDetailDataRange(
  $label: String
  $shortCode: String
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  verifyDetailDataRange(
    label: $label
    shortCode: $shortCode
    beginDate: $beginDate
    endDate: $endDate
  ) {
    status
    labelAdmin
  }
}

query metricModelsOverview(
  $label: String!
  $level: String = "repo"
  $repoType: String
) {
  metricModelsOverview(label: $label, level: $level, repoType: $repoType) {
    dimension
    grimoireCreationDate
    ident
    label
    level
    mainScore
    scope
    transformedScore
    type
    updatedAt
    reposCount
    shortCode
  }
}

query metricContributor(
  $label: String!
  $level: String = "repo"
  $start: ISO8601DateTime
  $end: ISO8601DateTime
  $repoType: String
) {
  metricDomainPersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityCodeContributionPerPerson
    activityCodeContributorCount
    activityIssueContributionPerPerson
    activityIssueContributorCount
    activityObservationContributionPerPerson
    activityObservationContributorCount
    domainPersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }

  metricMilestonePersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityCasualContributionPerPerson
    activityCasualContributorCount
    activityCoreContributionPerPerson
    activityCoreContributorCount
    activityRegularContributionPerPerson
    activityRegularContributorCount
    milestonePersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }
  metricRolePersona(
    label: $label
    level: $level
    beginDate: $start
    endDate: $end
    repoType: $repoType
  ) {
    activityIndividualContributionPerPerson
    activityIndividualContributorCount
    activityOrganizationContributionPerPerson
    activityOrganizationContributorCount
    rolePersonaScore
    grimoireCreationDate
    label
    level
    shortCode
    type
  }
}

query commitsRepoDataList(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitsRepoPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesRemoved
      repoName
      repoAttributeType
      sigName
    }
    page
    totalPage
  }
}
query commitsDetailDataList(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitsDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      authorEmail
      commitHash
      grimoireCreationDate
      linesAdded
      linesChanged
      linesRemoved
      mergedAt
      orgName
      prUrl
      repoName
    }
    page
    totalPage
  }
}
query commitsOrganizationDataList(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitsOrganizationPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesChangedRatio
      linesRemoved
      orgName
    }
    page
    totalPage
  }
}
query commitsContributorList(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitsContributorList(
    label: $label
    level: $level
    branch: $branch
    beginDate: $beginDate
    endDate: $endDate
  ) {
    authorEmail
    grimoireCreationDate
    linesAdded
    linesChanged
    linesRemoved
    orgName
  }
}
query codesRepoPage(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  codesRepoPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      lines
      linesChang
      linesTotal
      manager
      repoAttributeType
      repoName
      sigName
    }
    page
    totalPage
  }
}
query codesDetailPage(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  codesDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commitUrls
      createdAt
      issueNum
      linesTotal
      mergedAt
      tag
      title
      url
      userLogin
    }
    page
    totalPage
  }
}
query codesTrend(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  codesTrend(
    label: $label
    level: $level
    branch: $branch
    beginDate: $beginDate
    endDate: $endDate
  ) {
    detailList {
      count
      date
    }
    sigName
  }
}
query commitsSigPage(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitsSigPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      linesAdded
      linesChanged
      linesRemoved
      sigName
    }
    page
    totalPage
  }
}
query codesCheckDetailPage(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  codesCheckDetailPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commentCreatedAt
      commentNum
      issueNum
      linesAdded
      linesRemoved
      prState
      prUrl
      prUserLogin
      timeCheckHours
      userLogin
    }
    page
    totalPage
  }
}

query codesCheckPage(
  $label: String!
  $level: String = "repo"
  $branch: String = "master"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  codesCheckPage(
    label: $label
    level: $level
    branch: $branch
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commentNum
      linesAdded
      linesRemoved
      timeCheckHours
      userLogin
    }
    page
    totalPage
  }
}
query commitFeedbackPage(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
  $beginDate: ISO8601DateTime
  $endDate: ISO8601DateTime
) {
  commitFeedbackPage(
    label: $label
    level: $level
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
    beginDate: $beginDate
    endDate: $endDate
  ) {
    count
    items {
      commitHash
      contactWay
      createAtDate
      id
      newLinesAdded
      newLinesChanged
      newLinesRemoved
      oldLinesAdded
      oldLinesChanged
      oldLinesRemoved
      prUrl
      repoName
      requestReviewerEmail
      reviewMsg
      reviewerEmail
      reviewerId
      state
      submitReason
      submitUserEmail
      submitUserId
      updateAtDate
    }
    page
    totalPage
  }
}
query organizationPage(
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
) {
  organizationPage(
    page: $page
    per: $per
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      domain
      orgName
    }
    page
    totalPage
  }
}

query subjectAccessLevelPage(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $accessLevel: Int
) {
  subjectAccessLevelPage(
    page: $page
    per: $per
    label: $label
    level: $level
    accessLevel: $accessLevel
  ) {
    count
    items {
      accessLevel
      id
      subjectId
      user {
        id
        name
        roleLevel
        email
        language
        emailVerified
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
        contributingOrgs {
          firstDate
          lastDate
          orgName
          platformType
        }
      }
      userId
    }
    page
    totalPage
  }
}

query subjectSigPage(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
) {
  subjectSigPage(page: $page, per: $per, label: $label, level: $level) {
    count
    items {
      description
      emails
      id
      linkSig {
        label
        level
        repos
      }
      maintainers
      name
    }
    page
    totalPage
  }
}

fragment tpcSoftwareSig on TpcSoftwareSig {
  description
  id
  name
}
fragment tpcSoftwareReportMetric on TpcSoftwareReportMetric {
  complianceDco
  complianceLicense
  compliancePackageSig
  complianceLicenseCompatibility
  createdAt
  ecologyAdoptionAnalysis
  ecologyCodeMaintenance
  ecologyCommunitySupport
  ecologyDependencyAcquisition
  ecologyPatentRisk
  ecologySoftwareQuality
  ecologyAdaptationMethod
  id
  lifecycleVersionLifecycle
  lifecycleVersionNormalization
  lifecycleVersionNumber
  securityBinaryArtifact
  securityHistoryVulnerability
  securityVulnerability
  securityVulnerabilityDisclosure
  securityVulnerabilityResponse
  status
  tpcSoftwareReportId
  updatedAt
}
query tpcSoftwareSelectionReportPage(
  $label: String!
  $level: String = "repo"
  $reportTypeList: [Int!]!
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
) {
  tpcSoftwareSelectionReportPage(
    page: $page
    per: $per
    reportTypeList: $reportTypeList
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      adaptationMethod
      architectureDiagrams {
        filename
        id
        url
      }
      codeCount
      codeUrl
      id
      name
      programmingLanguage
      reportType
      shortCode
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      vulnerabilityResponse
      tpcSoftwareReportMetric {
        ...tpcSoftwareReportMetric
      }
      tpcSoftwareSig {
        ...tpcSoftwareSig
      }
    }
    page
    totalPage
  }
}
query tpcSoftwareSelectionPage(
  $label: String!
  $level: String = "repo"
  $selectionType: Int!
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
) {
  tpcSoftwareSelectionPage(
    page: $page
    per: $per
    selectionType: $selectionType
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      committers
      createdAt
      demandSource
      functionalDescription
      id
      incubationTime
      isSameTypeCheck
      repoUrl
      reason
      sameTypeSoftwareName
      selectionType
      targetSoftware
      updatedAt
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      tpcSoftwareSelectionReportIds
      tpcSoftwareSelectionReports {
        name
        shortCode
        codeUrl
      }
    }
    page
    totalPage
  }
}
fragment tpcSoftwareReportMetricDetail on TpcSoftwareReportMetric {
  baseCodeUrlDetail
  baseRepoNameDetail
  baseWebsiteUrlDetail
  complianceDcoDetail {
    commitCount
    commitDcoCount
  }
  complianceLicenseCompatibilityDetail {
    license
    licenseConflictList
  }
  complianceLicenseDetail {
    nonOsiLicenses
    osiCopyleftLimitedLicenses
    osiFreeRestrictedLicenses
    osiPermissiveLicenses
  }
  compliancePackageSigDetail
  ecologyAdoptionAnalysisDetail
  ecologyCodeMaintenanceDetail
  ecologyCommunitySupportDetail
  ecologyDependencyAcquisitionDetail
  ecologyPatentRiskDetail
  ecologyAdaptationMethodDetail
  ecologySoftwareQualityDetail {
    coverageRatio
    coverageScore
    duplicationRatio
    duplicationScore
  }
  lifecycleVersionLifecycleDetail {
    archived
    latestVersionCreatedAt
    latestVersionName
  }
  lifecycleVersionNormalizationDetail
  lifecycleVersionNumberDetail
  securityBinaryArtifactDetail
  securityHistoryVulnerabilityDetail {
    summary
    vulnerability
  }
  securityVulnerabilityDetail {
    packageName
    packageVersion
    vulnerabilities
  }
  securityVulnerabilityDisclosureDetail
  securityVulnerabilityResponseDetail
}

fragment tpcSoftwareReportMetricRaw on TpcSoftwareReportMetricRaw {
  codeUrl
  complianceDcoRaw
  complianceLicenseCompatibilityRaw
  complianceLicenseRaw
  compliancePackageSigRaw
  ecologyAdoptionAnalysisRaw
  ecologyCodeMaintenanceRaw
  ecologyCommunitySupportRaw
  ecologyDependencyAcquisitionRaw
  ecologyPatentRiskRaw
  ecologySoftwareQualityRaw
  ecologyAdaptationMethodRaw
  id
  lifecycleVersionLifecycleRaw
  lifecycleVersionNormalizationRaw
  lifecycleVersionNumberRaw
  securityBinaryArtifactRaw
  securityHistoryVulnerabilityRaw
  securityVulnerabilityDisclosureRaw
  securityVulnerabilityRaw
  securityVulnerabilityResponseRaw
}
query tpcSoftwareSelectionReport($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    adaptationMethod
    architectureDiagrams {
      filename
      id
      url
    }
    codeCount
    codeUrl
    id
    name
    programmingLanguage
    shortCode
    vulnerabilityResponse
    tpcSoftwareReportMetric {
      ...tpcSoftwareReportMetric
      ...tpcSoftwareReportMetricDetail
    }
    tpcSoftwareSig {
      ...tpcSoftwareSig
    }
    userId
  }
  tpcSoftwareReportMetricClarificationPermission(
    shortCode: $shortCode
    reportType: 0
  ) {
    clarificationCommitterPermission
    clarificationSigLeadPermission
    clarificationCompliancePermission
    clarificationLegalPermission
  }
}

query tpcSoftwareSelectionReportRow($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    id
    tpcSoftwareReportMetricRaw {
      ...tpcSoftwareReportMetricRaw
    }
  }
}
query tpcSoftwareReportMetricClarificationPage(
  $shortCode: String!
  $metricName: String!
  $page: Int
  $per: Int
  $reportType: Int = 0
) {
  tpcSoftwareReportMetricClarificationPage(
    shortCode: $shortCode
    page: $page
    per: $per
    metricName: $metricName
    reportType: $reportType
  ) {
    count
    items {
      content
      createdAt
      id
      metricName
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}
fragment tpcClarificationStateDetail on TpcSoftwareCommentState {
  createdAt
  id
  memberType
  # committer: 0, sig lead: 1
  metricName
  state
  # reject: -1, accept: 1
  updatedAt
  user {
    name
  }
  userId
}
query tpcSoftwareSelectionReportRisk($shortCode: String!) {
  tpcSoftwareSelectionReport(shortCode: $shortCode) {
    codeUrl
    id
    shortCode
    metricClarificationCount {
      complianceDco
      complianceLicense
      complianceLicenseCompatibility
      compliancePackageSig
      ecologyAdoptionAnalysis
      ecologyCodeMaintenance
      ecologyCommunitySupport
      ecologyDependencyAcquisition
      ecologyPatentRisk
      ecologySoftwareQuality
      ecologyAdaptationMethod
      lifecycleVersionLifecycle
      lifecycleVersionNormalization
      lifecycleVersionNumber
      securityBinaryArtifact
      securityHistoryVulnerability
      securityVulnerability
      securityVulnerabilityDisclosure
      securityVulnerabilityResponse
    }
    metricClarificationState {
      complianceDco {
        ...tpcClarificationStateDetail
      }
      complianceLicense {
        ...tpcClarificationStateDetail
      }
      complianceLicenseCompatibility {
        ...tpcClarificationStateDetail
      }
      compliancePackageSig {
        ...tpcClarificationStateDetail
      }
      ecologyAdoptionAnalysis {
        ...tpcClarificationStateDetail
      }
      ecologyCodeMaintenance {
        ...tpcClarificationStateDetail
      }
      ecologyCommunitySupport {
        ...tpcClarificationStateDetail
      }
      ecologyDependencyAcquisition {
        ...tpcClarificationStateDetail
      }
      ecologyPatentRisk {
        ...tpcClarificationStateDetail
      }
      ecologySoftwareQuality {
        ...tpcClarificationStateDetail
      }
      ecologyAdaptationMethod {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionLifecycle {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionNormalization {
        ...tpcClarificationStateDetail
      }
      lifecycleVersionNumber {
        ...tpcClarificationStateDetail
      }
      securityBinaryArtifact {
        ...tpcClarificationStateDetail
      }
      securityHistoryVulnerability {
        ...tpcClarificationStateDetail
      }
      securityVulnerability {
        ...tpcClarificationStateDetail
      }
      securityVulnerabilityDisclosure {
        ...tpcClarificationStateDetail
      }
      securityVulnerabilityResponse {
        ...tpcClarificationStateDetail
      }
    }
    userId
  }
}
query tpcSoftwareSelectionCommentPage(
  $selectionId: Int!
  $page: Int!
  $per: Int!
  $reportType: Int = 0
) {
  tpcSoftwareSelectionCommentPage(
    page: $page
    per: $per
    selectionId: $selectionId
    reportType: $reportType
  ) {
    count
    items {
      content
      createdAt
      id
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    page
    totalPage
  }
}

query tpcSoftwareSelection($selectionId: Int!) {
  tpcSoftwareSelection(selectionId: $selectionId) {
    commentCompliancePermission
    commentLegalPermission
    commentCommitterPermission
    commentCount
    commentSigLeadPermission
    commentState {
      createdAt
      id
      memberType
      state
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    targetSoftware
    reason
    demandSource
    functionalDescription
    incubationTime
    committers
    isSameTypeCheck
    sameTypeSoftwareName
    repoUrl
    tpcSoftwareSelectionReports {
      adaptationMethod
      license
      codeUrl
    }
  }
}

fragment tpcSoftwareGraduationReportMetric on TpcSoftwareGraduationReportMetric {
  complianceCopyrightStatement
  complianceCopyrightStatementAntiTamper
  complianceDco
  complianceLicense
  complianceLicenseCompatibility
  complianceSnippetReference
  ecologyBuild
  ecologyBuildDoc
  ecologyCi
  ecologyCodeReview
  ecologyCodeUpstream
  ecologyInterfaceDoc
  ecologyIssueManagement
  ecologyIssueResponseRatio
  ecologyIssueResponseTime
  ecologyMaintainerDoc
  ecologyReadme
  ecologyTestCoverage
  lifecycleReleaseNote
  lifecycleStatement
  securityBinaryArtifact
  securityPackageSig
  securityVulnerability
  createdAt
  id
  status
  tpcSoftwareGraduationReportId
  updatedAt
  codeUrl
}
fragment tpcSoftwareGraduationReportMetricDetail on TpcSoftwareGraduationReportMetric {
  complianceCopyrightStatementAntiTamperDetail
  complianceCopyrightStatementDetail {
    includeCopyrights
    notIncludedCopyrights
  }
  complianceDcoDetail {
    commitCount
    commitDcoCount
  }
  complianceLicenseCompatibilityDetail {
    license
    licenseConflictList
  }
  complianceLicenseDetail {
    nonOsiLicenses
    osiPermissiveLicenses
  }
  complianceSnippetReferenceDetail
  ecologyBuildDetail
  ecologyBuildDocDetail
  ecologyCiDetail
  ecologyCodeReviewDetail {
    pullCount
    pullReviewCount
    pullReviewRatio
  }
  ecologyCodeUpstreamDetail
  ecologyInterfaceDocDetail
  ecologyIssueManagementDetail {
    issueCount
    issueTypeList
  }
  ecologyIssueResponseRatioDetail {
    issueCount
    issueResponseCount
    issueResponseRatio
  }
  ecologyIssueResponseTimeDetail {
    issueResponseCount
    issueResponseTime
  }
  ecologyMaintainerDocDetail
  ecologyReadmeDetail
  ecologyTestCoverageDetail {
    coverageRatio
    coverageScore
    duplicationRatio
    duplicationScore
  }
  lifecycleReleaseNoteDetail
  lifecycleStatementDetail
  securityBinaryArtifactDetail
  securityPackageSigDetail
  securityVulnerabilityDetail {
    packageName
    packageVersion
    vulnerabilities
  }
}
fragment tpcSoftwareGraduationReportMetricRaw on TpcSoftwareGraduationReportMetricRaw {
  codeUrl
  complianceCopyrightStatementAntiTamperRaw
  complianceCopyrightStatementRaw
  complianceDcoRaw
  complianceLicenseCompatibilityRaw
  complianceLicenseRaw
  complianceSnippetReferenceRaw
  ecologyBuildDocRaw
  ecologyBuildRaw
  ecologyCiRaw
  ecologyCodeReviewRaw
  ecologyCodeUpstreamRaw
  ecologyInterfaceDocRaw
  ecologyIssueManagementRaw
  ecologyIssueResponseRatioRaw
  ecologyIssueResponseTimeRaw
  ecologyMaintainerDocRaw
  ecologyReadmeRaw
  ecologyTestCoverageRaw
  id
  lifecycleReleaseNoteRaw
  lifecycleStatementRaw
  securityBinaryArtifactRaw
  securityPackageSigRaw
  securityVulnerabilityRaw
}
query tpcSoftwareGraduationReportPage(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
) {
  tpcSoftwareGraduationReportPage(
    page: $page
    per: $per
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      adaptationMethod
      architectureDiagrams {
        filename
        id
        url
      }
      isIncubation
      roundUpstream
      codeUrl
      id
      name
      upstreamCodeUrl
      lifecyclePolicy
      shortCode
      programmingLanguage
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      graduationReportMetric {
        ...tpcSoftwareGraduationReportMetric
      }
      tpcSoftwareSig {
        ...tpcSoftwareSig
      }
    }
    page
    totalPage
  }
}
query tpcSoftwareGraduationReport($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    adaptationMethod
    architectureDiagrams {
      filename
      id
      url
    }
    codeCount
    license
    codeUrl
    id
    name
    upstreamCodeUrl
    shortCode
    programmingLanguage
    user {
      name
      loginBinds {
        account
        nickname
        provider
      }
    }
    userId
    graduationReportMetric {
      ...tpcSoftwareGraduationReportMetric
      ...tpcSoftwareGraduationReportMetricDetail
    }
    tpcSoftwareSig {
      ...tpcSoftwareSig
    }
  }
  tpcSoftwareReportMetricClarificationPermission(
    shortCode: $shortCode
    reportType: 1
  ) {
    clarificationCommitterPermission
    clarificationSigLeadPermission
    clarificationCompliancePermission
    clarificationLegalPermission
  }
}
query tpcSoftwareGraduationPage(
  $label: String!
  $level: String = "repo"
  $page: Int
  $per: Int
  $filterOpts: [FilterOptionInput!]
  $sortOpts: [SortOptionInput!]
) {
  tpcSoftwareGraduationPage(
    page: $page
    per: $per
    label: $label
    level: $level
    filterOpts: $filterOpts
    sortOpts: $sortOpts
  ) {
    count
    items {
      id
      createdAt
      updatedAt
      demandSource
      committers
      incubationStartTime
      incubationTime
      tpcSoftwareGraduationReportIds
      functionalDescription
      tpcSoftwareGraduationReports {
        name
        shortCode
        codeUrl
        license
        codeCount
      }
      user {
        name
        loginBinds {
          account
          nickname
          provider
        }
      }
      userId
      # functionalDescription
      # id
      # incubationTime
      # isSameTypeCheck
      # repoUrl
      # reason
      # sameTypeSoftwareName
      # selectionType
      # targetSoftware
      # updatedAt
      # user {
      #   name
      #   loginBinds {
      #     account
      #     nickname
      #     provider
      #   }
      # }
      # userId
      # tpcSoftwareSelectionReportIds
      # tpcSoftwareSelectionReports {
      #   name
      #   shortCode
      #   codeUrl
      # }
    }
    page
    totalPage
  }
}
query tpcSoftwareGraduation($graduationId: Int!) {
  tpcSoftwareGraduation(graduationId: $graduationId) {
    commentCompliancePermission
    commentLegalPermission
    commentCommitterPermission
    commentCount
    commentSigLeadPermission
    commentState {
      createdAt
      id
      memberType
      state
      updatedAt
      user {
        name
        loginBinds {
          account
          avatarUrl
          nickname
          provider
        }
      }
      userId
    }
    demandSource
    incubationTime
    committers
    functionalDescription
    tpcSoftwareGraduationReports {
      adaptationMethod
      license
      codeUrl
      name
      codeCount
    }
  }
}
query tpcSoftwareGraduationReportRisk($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    codeUrl
    id
    shortCode
    metricClarificationCount {
      complianceCopyrightStatement
      complianceCopyrightStatementAntiTamper
      complianceDco
      complianceLicense
      complianceLicenseCompatibility
      complianceSnippetReference
      ecologyBuild
      ecologyBuildDoc
      ecologyCi
      ecologyCodeReview
      ecologyCodeUpstream
      ecologyInterfaceDoc
      ecologyIssueManagement
      ecologyIssueResponseRatio
      ecologyIssueResponseTime
      ecologyMaintainerDoc
      ecologyReadme
      ecologyTestCoverage
      lifecycleReleaseNote
      lifecycleStatement
      securityBinaryArtifact
      securityPackageSig
      securityVulnerability
    }
    metricClarificationState {
      complianceCopyrightStatement {
        ...tpcClarificationStateDetail
      }
      complianceCopyrightStatementAntiTamper {
        ...tpcClarificationStateDetail
      }
      complianceDco {
        ...tpcClarificationStateDetail
      }
      complianceLicense {
        ...tpcClarificationStateDetail
      }
      complianceLicenseCompatibility {
        ...tpcClarificationStateDetail
      }
      complianceSnippetReference {
        ...tpcClarificationStateDetail
      }
      ecologyBuild {
        ...tpcClarificationStateDetail
      }
      ecologyBuildDoc {
        ...tpcClarificationStateDetail
      }
      ecologyCi {
        ...tpcClarificationStateDetail
      }
      ecologyCodeReview {
        ...tpcClarificationStateDetail
      }
      ecologyCodeUpstream {
        ...tpcClarificationStateDetail
      }
      ecologyInterfaceDoc {
        ...tpcClarificationStateDetail
      }
      ecologyIssueManagement {
        ...tpcClarificationStateDetail
      }
      ecologyIssueResponseRatio {
        ...tpcClarificationStateDetail
      }
      ecologyIssueResponseTime {
        ...tpcClarificationStateDetail
      }
      ecologyMaintainerDoc {
        ...tpcClarificationStateDetail
      }
      ecologyReadme {
        ...tpcClarificationStateDetail
      }
      ecologyTestCoverage {
        ...tpcClarificationStateDetail
      }
      lifecycleReleaseNote {
        ...tpcClarificationStateDetail
      }
      lifecycleStatement {
        ...tpcClarificationStateDetail
      }
      securityBinaryArtifact {
        ...tpcClarificationStateDetail
      }
      securityPackageSig {
        ...tpcClarificationStateDetail
      }
      securityVulnerability {
        ...tpcClarificationStateDetail
      }
    }
    userId
  }
}
query tpcSoftwareGraduationReportRow($shortCode: String!) {
  tpcSoftwareGraduationReport(shortCode: $shortCode) {
    id
    graduationReportMetricRaw {
      ...tpcSoftwareGraduationReportMetricRaw
    }
  }
}
query tpcSoftwareSelectionSearch(
  $label: String!
  $level: String = "repo"
  $keyword: String!
  $selectionType: Int!
) {
  tpcSoftwareSelectionSearch(
    label: $label
    level: $level
    keyword: $keyword
    selectionType: $selectionType
  ) {
    # committers
    # createdAt
    # demandSource
    # id
    # incubationTime
    # repoUrl
    # selectionType
    # incubation
    # targetSoftware
    repoUrl
    tpcSoftwareSelectionReport {
      name
      codeUrl
      tpcSoftwareSigId
      programmingLanguage
      adaptationMethod
    }
    # tpcSoftwareSelectionReportIds
  }
}
