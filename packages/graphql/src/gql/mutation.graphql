mutation createRepoTask($repoUrls: [String!]!, $origin: String!) {
  createRepoTask(input: { repoUrls: $repoUrls, origin: $origin }) {
    message
    status
    prUrl
    reportUrl
  }
}

mutation createProjectTask(
  $projectName: String!
  $projectTypes: [ProjectTypeInput!]!
  $origin: String!
  $projectUrl: String
  $projectLogoUrl: String
) {
  createProjectTask(
    input: {
      projectName: $projectName
      projectTypes: $projectTypes
      origin: $origin
      projectUrl: $projectUrl
      projectLogoUrl: $projectLogoUrl
    }
  ) {
    message
    status
    prUrl
    reportUrl
  }
}

mutation modifyUser($name: String!, $email: String!, $language: String) {
  modifyUser(input: { name: $name, email: $email, language: $language }) {
    message
    status
  }
}

mutation userUnbind($provider: String!) {
  userUnbind(input: { provider: $provider }) {
    message
    status
  }
}

mutation sendEmailVerify {
  sendEmailVerify(input: {}) {
    message
    status
  }
}

mutation signOut {
  signOut
}

mutation deleteUser {
  destroyUser
}

mutation bindWechatLink {
  bindWechatLink(input: {}) {
    url
    message
  }
}

mutation createSubscription($label: String!, $level: String!) {
  createSubscription(input: { label: $label, level: $level }) {
    message
    status
  }
}

mutation cancelSubscription($label: String!, $level: String!) {
  cancelSubscription(input: { label: $label, level: $level }) {
    message
    status
  }
}
mutation modifyUserOrgs(
  $platform: String!
  $organizations: [ContributorOrgInput!]!
) {
  modifyUserOrgs(
    input: { platform: $platform, organizations: $organizations }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    status
  }
}
mutation manageUserOrgs(
  $platform: String!
  $organizations: [ContributorOrgInput!]!
  $contributor: String!
  $label: String!
  $level: String!
) {
  manageUserOrgs(
    input: {
      platform: $platform
      contributor: $contributor
      label: $label
      level: $level
      organizations: $organizations
    }
  ) {
    clientMutationId
    errors {
      message
      path
    }
    message
    prUrl
    status
  }
}

# fragment tpcSoftwareSelectionReportInput on TpcSoftwareSelectionReportInput {
#   name
#   tpcSoftwareSigId
#   release
#   releaseTime
#   manufacturer
#   websiteUrl
#   codeUrl
#   programmingLanguage
# }
mutation createTpcSoftwareSelectionReport(
  $label: String!
  $level: String!
  $reportType: Int!
  $softwareReport: TpcSoftwareSelectionReportInput!
) {
  createTpcSoftwareSelectionReport(
    input: {
      label: $label
      level: $level
      reportType: $reportType
      softwareReport: $softwareReport
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createTpcSoftwareSelection(
  $label: String!
  $level: String!
  $tpcSoftwareSelectionReportIds: [Int!]!
  $selectionType: Int!
  $repoUrl: [String!]!
  $committers: [String!]!
  $functionalDescription: String!
  $incubationTime: String!
  $demandSource: String
  $reason: String!
  $adaptationMethod: String!
  $targetSoftware: String!
  $isSameTypeCheck: Int!
) {
  createTpcSoftwareSelection(
    input: {
      label: $label
      level: $level
      selectionType: $selectionType
      tpcSoftwareSelectionReportIds: $tpcSoftwareSelectionReportIds
      repoUrl: $repoUrl
      committers: $committers
      functionalDescription: $functionalDescription
      demandSource: $demandSource
      incubationTime: $incubationTime
      reason: $reason
      adaptationMethod: $adaptationMethod
      targetSoftware: $targetSoftware
      isSameTypeCheck: $isSameTypeCheck
    }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation createTpcSoftwareReportMetricClarification(
  $shortCode: String!
  $metricName: String!
  $content: String!
) {
  createTpcSoftwareReportMetricClarification(
    input: { shortCode: $shortCode, metricName: $metricName, content: $content }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation deleteReportMetricClarification($clarificationId: Int!) {
  deleteTpcSoftwareReportMetricClarification(
    input: { clarificationId: $clarificationId }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
mutation updateReportMetricClarification(
  $clarificationId: Int!
  $content: String!
) {
  updateTpcSoftwareReportMetricClarification(
    input: { clarificationId: $clarificationId, content: $content }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}

mutation acceptTpcSoftwareReportMetricClarification(
  $shortCode: String!
  $metricName: String!
) {
  acceptTpcSoftwareReportMetricClarification(
    input: { shortCode: $shortCode, metricName: $metricName }
  ) {
    errors {
      message
      path
    }
    message
    status
  }
}
#  deleteTpcSoftwareReportMetricClarification
